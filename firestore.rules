
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for user profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Do not allow users to delete their own account from the client
    }

    // Rules for ads
    match /ads/{adId} {
      allow read: if true; // Anyone can view ads
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // Must be authenticated owner
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid; // Must be authenticated owner

      // Complex update logic:
      // 1. The owner can edit their ad's details (but not the like count).
      // 2. Any logged-in user can like/unlike an ad (updating only 'likes' and 'likedBy').
      allow update: if request.auth != null && (
        ( // Rule for the ad owner editing the content
          resource.data.userId == request.auth.uid &&
          !('likes' in request.resource.data.diff(resource.data).affectedKeys()) &&
          !('likedBy' in request.resource.data.diff(resource.data).affectedKeys())
        ) ||
        ( // Rule for any authenticated user liking/unliking the ad
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']) &&
          // Enforce that the likes count can only change by 1
          (request.resource.data.likes == resource.data.likes + 1 || request.resource.data.likes == resource.data.likes - 1) &&
          // Enforce that the likedBy array size only changes by 1
          (request.resource.data.likedBy.size() == resource.data.likedBy.size() + 1 || request.resource.data.likedBy.size() == resource.data.likedBy.size() - 1)
        )
      );
    }
  }
}
